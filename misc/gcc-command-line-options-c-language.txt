ubuntu@ubuntu-xenial:~$ gcc --help=c
The following options are supported by the language C:
  --all-warnings              This switch lacks documentation
  --ansi                      This switch lacks documentation
  --assert                    This switch lacks documentation
  --assert=                   This switch lacks documentation
  --comments                  This switch lacks documentation
  --comments-in-macros        This switch lacks documentation
  --define-macro              This switch lacks documentation
  --define-macro=             This switch lacks documentation
  --dependencies              This switch lacks documentation
  --dump                      This switch lacks documentation
  --dump=                     This switch lacks documentation
  --imacros                   This switch lacks documentation
  --imacros=                  This switch lacks documentation
  --include                   This switch lacks documentation
  --include-barrier           This switch lacks documentation
  --include-directory         This switch lacks documentation
  --include-directory-after   This switch lacks documentation
  --include-directory-after=  This switch lacks documentation
  --include-directory=        This switch lacks documentation
  --include-prefix            This switch lacks documentation
  --include-prefix=           This switch lacks documentation
  --include-with-prefix       This switch lacks documentation
  --include-with-prefix-after This switch lacks documentation
  --include-with-prefix-after= This switch lacks documentation
  --include-with-prefix-before This switch lacks documentation
  --include-with-prefix-before= This switch lacks documentation
  --include-with-prefix=      This switch lacks documentation
  --include=                  This switch lacks documentation
  --no-line-commands          This switch lacks documentation
  --no-standard-includes      This switch lacks documentation
  --no-warnings               This switch lacks documentation
  --output                    This switch lacks documentation
  --output-pch=               This switch lacks documentation
  --output=                   This switch lacks documentation
  --pedantic                  This switch lacks documentation
  --preprocess                This switch lacks documentation
  --print-missing-file-dependencies This switch lacks documentation
  --trace-includes            This switch lacks documentation
  --traditional-cpp           This switch lacks documentation
  --trigraphs                 This switch lacks documentation
  --undefine-macro            This switch lacks documentation
  --undefine-macro=           This switch lacks documentation
  --user-dependencies         This switch lacks documentation
  --verbose                   This switch lacks documentation
  --write-dependencies        This switch lacks documentation
  --write-user-dependencies   This switch lacks documentation
  -A<question>=<answer>       Assert the <answer> to <question>.  Putting '-' before <question> disables the <answer> to <question>
  -C                          Do not discard comments
  -CC                         Do not discard comments in macro expansions
  -D<macro>[=<val>]           Define a <macro> with <val> as its value.  If just <macro> is given, <val> is taken to be 1
  -E                          This switch lacks documentation
  -F <dir>                    Add <dir> to the end of the main framework include path
  -H                          Print the name of header files as they are used
  -I <dir>                    Add <dir> to the end of the main include path
  -M                          Generate make dependencies
  -MD                         Generate make dependencies and compile
  -MF <file>                  Write dependency output to the given file
  -MG                         Treat missing header files as generated files
  -MM                         Like -M but ignore system header files
  -MMD                        Like -MD but ignore system header files
  -MP                         Generate phony targets for all headers
  -MQ <target>                Add a MAKE-quoted target
  -MT <target>                Add an unquoted target
  -P                          Do not generate #line directives
  -U<macro>                   Undefine <macro>
  -Wabi                       Warn about things that will change when compiling with an ABI-compliant compiler
  -Wabi=                      Warn about things that change between the current -fabi-version and the specified version
  -Waddress                   Warn about suspicious uses of memory addresses
  -Wall                       Enable most warning messages
  -Wbad-function-cast         Warn about casting functions to incompatible types
  -Wbool-compare              Warn about boolean expression compared with an integer value different from true/false
  -Wbuiltin-macro-redefined   Warn when a built-in preprocessor macro is undefined or redefined
  -Wc++-compat                Warn about C constructs that are not in the common subset of C and C++
  -Wc90-c99-compat            Warn about features not present in ISO C90, but present in ISO C99
  -Wc99-c11-compat            Warn about features not present in ISO C99, but present in ISO C11
  -Wcast-qual                 Warn about casts which discard qualifiers
  -Wchar-subscripts           Warn about subscripts whose type is "char"
  -Wchkp                      Warn about memory access errors found by Pointer Bounds Checker
  -Wclobbered                 Warn about variables that might be changed by "longjmp" or "vfork"
  -Wcomment                   Warn about possibly nested block comments, and C++ comments spanning more than one physical line
  -Wcomments                  Synonym for -Wcomment
  -Wconversion                Warn for implicit type conversions that may change a value
  -Wcpp                       Warn when a #warning directive is encountered
  -Wdate-time                 Warn about __TIME__, __DATE__ and __TIMESTAMP__ usage
  -Wdeclaration-after-statement Warn when a declaration is found after a statement
  -Wdeprecated                Warn if a deprecated compiler feature, class, method, or field is used
  -Wdesignated-init           Warn about positional initialization of structs requiring designated initializers
  -Wdiscarded-array-qualifiers Warn if qualifiers on arrays which are pointer targets are discarded
  -Wdiscarded-qualifiers      Warn if type qualifiers on pointers are discarded
  -Wdiv-by-zero               Warn about compile-time integer division by zero
  -Wdouble-promotion          Warn about implicit conversions from "float" to "double"
  -Wempty-body                Warn about an empty body in an if or else statement
  -Wendif-labels              Warn about stray tokens after #elif and #endif
  -Wenum-compare              Warn about comparison of different enum types
  -Werror                     Treat all warnings as errors
  -Werror-implicit-function-declaration This switch is deprecated; use -Werror=implicit-function-declaration instead
  -Wfloat-conversion          Warn for implicit type conversions that cause loss of floating point precision
  -Wfloat-equal               Warn if testing floating point numbers for equality
  -Wformat                    Warn about printf/scanf/strftime/strfmon format string anomalies
  -Wformat-contains-nul       Warn about format strings that contain NUL bytes
  -Wformat-extra-args         Warn if passing too many arguments to a function for its format string
  -Wformat-nonliteral         Warn about format strings that are not literals
  -Wformat-security           Warn about possible security problems with format functions
  -Wformat-signedness         Warn about sign differences with format functions
  -Wformat-y2k                Warn about strftime formats yielding 2-digit years
  -Wformat-zero-length        Warn about zero-length formats
  -Wformat=                   Warn about printf/scanf/strftime/strfmon format string anomalies
  -Wignored-qualifiers        Warn whenever type qualifiers are ignored.
  -Wimplicit                  Warn about implicit declarations
  -Wimplicit-function-declaration Warn about implicit function declarations
  -Wimplicit-int              Warn when a declaration does not specify a type
  -Wimport                    This switch lacks documentation
  -Wincompatible-pointer-types Warn when there is a conversion between pointers that have incompatible types
  -Winit-self                 Warn about variables which are initialized to themselves
  -Wint-conversion            Warn about incompatible integer to pointer and pointer to integer conversions
  -Wint-to-pointer-cast       Warn when there is a cast to a pointer from an integer of a different size
  -Winvalid-pch               Warn about PCH files that are found but not used
  -Wjump-misses-init          Warn when a jump misses a variable initialization
  -Wlogical-not-parentheses   Warn when logical not is used on the left hand side operand of a comparison
  -Wlogical-op                Warn when a logical operator is suspiciously always evaluating to true or false
  -Wlong-long                 Do not warn about using "long long" when -pedantic
  -Wmain                      Warn about suspicious declarations of "main"
  -Wmaybe-uninitialized       Warn about maybe uninitialized automatic variables
  -Wmemset-transposed-args    Warn about suspicious calls to memset where the third argument is constant literal zero and the second is not
  -Wmissing-braces            Warn about possibly missing braces around initializers
  -Wmissing-declarations      Warn about global functions without previous declarations
  -Wmissing-field-initializers Warn about missing fields in struct initializers
  -Wmissing-format-attribute  This switch lacks documentation
  -Wmissing-include-dirs      Warn about user-specified include directories that do not exist
  -Wmissing-parameter-type    Warn about function parameters declared without a type specifier in K&R-style functions
  -Wmissing-prototypes        Warn about global functions without prototypes
  -Wmudflap                   This switch lacks documentation
  -Wmultichar                 Warn about use of multi-character character constants
  -Wnarrowing                 Warn about narrowing conversions within { } that are ill-formed in C++11
  -Wnested-externs            Warn about "extern" declarations not at file scope
  -Wnonnull                   Warn about NULL being passed to argument slots marked as requiring non-NULL
  -Wnormalized                This switch lacks documentation
  -Wnormalized=<none|id|nfc|nfkc> Warn about non-normalised Unicode strings
  -Wold-style-declaration     Warn for obsolescent usage in a declaration
  -Wold-style-definition      Warn if an old-style parameter definition is used
  -Wopenmp-simd               Warn if a simd directive is overridden by the vectorizer cost model
  -Woverlength-strings        Warn if a string is longer than the maximum portable length specified by the standard
  -Woverride-init             Warn about overriding initializers without side effects
  -Wpacked-bitfield-compat    Warn about packed bit-fields whose offset changed in GCC 4.4
  -Wparentheses               Warn about possibly missing parentheses
  -Wpedantic                  Issue warnings needed for strict compliance to the standard
  -Wpointer-arith             Warn about function pointer arithmetic
  -Wpointer-sign              Warn when a pointer differs in signedness in an assignment
  -Wpointer-to-int-cast       Warn when a pointer is cast to an integer of a different size
  -Wpragmas                   Warn about misuses of pragmas
  -Wpsabi                     This switch lacks documentation
  -Wredundant-decls           Warn about multiple declarations of the same object
  -Wreturn-type               Warn whenever a function's return type defaults to "int" (C), or about inconsistent return types (C++)
  -Wsequence-point            Warn about possible violations of sequence point rules
  -Wshift-count-negative      Warn if shift count is negative
  -Wshift-count-overflow      Warn if shift count >= width of type
  -Wsign-compare              Warn about signed-unsigned comparisons
  -Wsign-conversion           Warn for implicit type conversions between signed and unsigned integers
  -Wsizeof-array-argument     Warn when sizeof is applied on a parameter declared as an array
  -Wsizeof-pointer-memaccess  Warn about suspicious length parameters to certain string functions if the argument uses sizeof
  -Wstrict-aliasing=          Warn about code which might break strict aliasing rules
  -Wstrict-overflow=          Warn about optimizations that assume that signed overflow is undefined
  -Wstrict-prototypes         Warn about unprototyped function declarations
  -Wsuggest-attribute=format  Warn about functions which might be candidates for format attributes
  -Wswitch                    Warn about enumerated switches, with no default, missing a case
  -Wswitch-bool               Warn about switches with boolean controlling expression
  -Wswitch-default            Warn about enumerated switches missing a "default:" statement
  -Wswitch-enum               Warn about all enumerated switches missing a specific case
  -Wsync-nand                 Warn when __sync_fetch_and_nand and __sync_nand_and_fetch built-in functions are used
  -Wsystem-headers            Do not suppress warnings from system headers
  -Wtraditional               Warn about features not present in traditional C
  -Wtraditional-conversion    Warn of prototypes causing type conversions different from what would happen in the absence of prototype
  -Wtrigraphs                 Warn if trigraphs are encountered that might affect the meaning of the program
  -Wundef                     Warn if an undefined macro is used in an #if directive
  -Wuninitialized             Warn about uninitialized automatic variables
  -Wunknown-pragmas           Warn about unrecognized pragmas
  -Wunsuffixed-float-constants Warn about unsuffixed float constants
  -Wunused                    Enable all -Wunused- warnings
  -Wunused-local-typedefs     Warn when typedefs locally defined in a function are not used
  -Wunused-macros             Warn about macros defined in the main file that are not used
  -Wunused-result             Warn if a caller of a function, marked with attribute warn_unused_result, does not use its return value
  -Wvarargs                   Warn about questionable usage of the macros used to retrieve variable arguments
  -Wvariadic-macros           Warn about using variadic macros
  -Wvla                       Warn if a variable length array is used
  -Wvolatile-register-var     Warn when a register variable is declared volatile
  -Wwrite-strings             In C++, nonzero means warn about deprecated conversion from string literals to 'char *'.  In C, similar warning, except that the conversion is of course not
                              deprecated by the ISO C standard.
  -ansi                       A synonym for -std=c89 (for C) or -std=c++98 (for C++)
  -d<letters>                 Enable dumps from specific passes of the compiler
  -fada-spec-parent=          -fada-spec-parent=unit  Dump Ada specs as child units of given parent
  -fallow-parameterless-variadic-functions Allow variadic functions without named parameter
  -fasm                       Recognize the "asm" keyword
  -fbuilding-libgcc           This switch lacks documentation
  -fbuiltin                   Recognize built-in functions
  -fbuiltin-                  This switch lacks documentation
  -fcanonical-system-headers  Where shorter, use canonicalized paths to systems headers.
  -fcheck-pointer-bounds      Add Pointer Bounds Checker instrumentation.  fchkp-* flags are used to control instrumentation.  Currently available for C, C++ and ObjC.
  -fchkp-check-incomplete-type Generate pointer bounds checks for variables with incomplete type
  -fchkp-check-read           Generate checks for all read accesses to memory.
  -fchkp-check-write          Generate checks for all write accesses to memory.
  -fchkp-first-field-has-own-bounds Forces Pointer Bounds Checker to use narrowed bounds for address of the first field in the structure.  By default pointer to the first field has the same
                              bounds as pointer to the whole structure.
  -fchkp-instrument-calls     Generate bounds passing for calls.
  -fchkp-instrument-marked-only Instrument only functions marked with bnd_instrument attribute.
  -fchkp-narrow-bounds        Control how Pointer Bounds Checker handle pointers to object fields.  When narrowing is on, field bounds are used.  Otherwise full object bounds are used.
  -fchkp-narrow-to-innermost-array Forces Pointer Bounds Checker to use bounds of the innermost arrays in case of nested static arryas access.  By default outermost array is used.
  -fchkp-optimize             Allow Pointer Bounds Checker optimizations.  By default allowed on optimization levels >0.
  -fchkp-store-bounds         Generate bounds stores for pointer writes.
  -fchkp-treat-zero-dynamic-size-as-infinite With this option zero size obtained dynamically for objects with incomplete type will be treated as infinite.
  -fchkp-use-fast-string-functions Allow to use *_nobnd versions of string functions by Pointer Bounds Checker.
  -fchkp-use-nochk-string-functions Allow to use *_nochk versions of string functions by Pointer Bounds Checker.
  -fchkp-use-static-bounds    Use statically initialized variable for vars bounds instead of generating them each time it is required.
  -fchkp-use-static-const-bounds Use statically initialized variable for constant bounds instead of generating them each time it is required.
  -fchkp-use-wrappers         Transform instrumented builtin calls into calls to wrappers.
  -fchkp-zero-input-bounds-for-main Use zero bounds for all incoming arguments in 'main' function.  It helps when instrumented binaries are used with legacy libs.
  -fcilkplus                  Enable Cilk Plus
  -fcond-mismatch             Allow the arguments of the '?' operator to have different types
  -fdebug-cpp                 Emit debug annotations during preprocessing
  -fdirectives-only           Preprocess directives only.
  -fdollars-in-identifiers    Permit '$' as an identifier character
  -fdump-ada-spec             Write all declarations as Ada code transitively
  -fdump-ada-spec-slim        Write all declarations as Ada code for the given file only
  -femit-struct-debug-baseonly Aggressive reduced debug info for structs
  -femit-struct-debug-detailed=<spec-list> Detailed reduced debug info for structs
  -femit-struct-debug-reduced Conservative reduced debug info for structs
  -fexec-charset=<cset>       Convert all strings and character constants to character set <cset>
  -fextended-identifiers      Permit universal character names (\u and \U) in identifiers
  -ffreestanding              Do not assume that standard C libraries and "main" exist
  -fgnu89-inline              Use traditional GNU semantics for inline functions
  -fhosted                    Assume normal C execution environment
  -finput-charset=<cset>      Specify the default character set for source files
  -flax-vector-conversions    Allow implicit conversions between vectors with differing numbers of subparts and/or differing element types.
  -fms-extensions             Don't warn about uses of Microsoft extensions
  -fmudflap                   This switch lacks documentation
  -fmudflapir                 This switch lacks documentation
  -fmudflapth                 This switch lacks documentation
  -fopenacc                   Enable OpenACC
  -fopenmp                    Enable OpenMP (implies -frecursive in Fortran)
  -fopenmp-simd               Enable OpenMP's SIMD directives
  -fpch-deps                  This switch lacks documentation
  -fpch-preprocess            Look for and use PCH files even when preprocessing
  -fplan9-extensions          Enable Plan 9 language extensions
  -fpreprocessed              Treat the input file as already preprocessed
  -fshort-double              Use the same size for double as for float
  -fshort-enums               Use the narrowest integer type possible for enumeration types
  -fshort-wchar               Force the underlying type for "wchar_t" to be "unsigned short"
  -fsigned-bitfields          When "signed" or "unsigned" is not given make the bitfield signed
  -fsigned-char               Make "char" signed by default
  -ftabstop=<number>          Distance between tab stops for column reporting
  -ftrack-macro-expansion     This switch lacks documentation
  -ftrack-macro-expansion=    -ftrack-macro-expansion=<0|1|2>  Track locations of tokens coming from macro expansion and display them in error messages
  -funsigned-bitfields        When "signed" or "unsigned" is not given make the bitfield unsigned
  -funsigned-char             Make "char" unsigned by default
  -fwide-exec-charset=<cset>  Convert all wide strings and character constants to character set <cset>
  -fworking-directory         Generate a #line directive pointing at the current working directory
  -idirafter <dir>            Add <dir> to the end of the system include path
  -imacros <file>             Accept definition of macros in <file>
  -imultilib <dir>            Set <dir> to be the multilib include subdirectory
  -include <file>             Include the contents of <file> before other files
  -iprefix <path>             Specify <path> as a prefix for next two options
  -iquote <dir>               Add <dir> to the end of the quote include path
  -isysroot <dir>             Set <dir> to be the system root directory
  -isystem <dir>              Add <dir> to the start of the system include path
  -iwithprefix <dir>          Add <dir> to the end of the system include path
  -iwithprefixbefore <dir>    Add <dir> to the end of the main include path
  -lang-asm                   This switch lacks documentation
  -nostdinc                   Do not search standard system include directories (those specified with -isystem will still be used)
  -o <file>                   Place output into <file>
  -pedantic                   This switch lacks documentation
  -remap                      Remap file names when including files
  -std=c11                    Conform to the ISO 2011 C standard
  -std=c1x                    Deprecated in favor of -std=c11
  -std=c89                    Conform to the ISO 1990 C standard
  -std=c90                    Conform to the ISO 1990 C standard
  -std=c99                    Conform to the ISO 1999 C standard
  -std=c9x                    Deprecated in favor of -std=c99
  -std=gnu11                  Conform to the ISO 2011 C standard with GNU extensions
  -std=gnu1x                  Deprecated in favor of -std=gnu11
  -std=gnu89                  Conform to the ISO 1990 C standard with GNU extensions
  -std=gnu90                  Conform to the ISO 1990 C standard with GNU extensions
  -std=gnu99                  Conform to the ISO 1999 C standard with GNU extensions
  -std=gnu9x                  Deprecated in favor of -std=gnu99
  -std=iso9899:1990           Conform to the ISO 1990 C standard
  -std=iso9899:199409         Conform to the ISO 1990 C standard as amended in 1994
  -std=iso9899:1999           Conform to the ISO 1999 C standard
  -std=iso9899:199x           Deprecated in favor of -std=iso9899:1999
  -std=iso9899:2011           Conform to the ISO 2011 C standard
  -traditional-cpp            Enable traditional preprocessing
  -trigraphs                  Support ISO C trigraphs
  -undef                      Do not predefine system-specific and GCC-specific macros
  -v                          Enable verbose output
  -w                          Suppress warnings
